user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
  worker_connections 768;
}

http {
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
  ssl_prefer_server_ciphers on;

  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  gzip on;

  server {
    server_name sgsg.space www.sgsg.space;

    root /home/ubuntu/frontend/build;
    index index.html index.htm;

    location / {
      try_files $uri $uri/ /index.html;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/sgsg.space/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/sgsg.space/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
  }

  server {
    include /etc/nginx/service-url.inc;
    resolver 127.0.0.11; # docker network dns
    server_name api.sgsg.space;

    location / {
      if ($request_method = OPTIONS) { # CORS
        add_header "Access-Control-Allow-Origin" "*";
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
        add_header "Access-Control-Allow-Headers" "api_key, Authorization, Origin, X-Requested-With, Content-Type, Accept";
        return 204;
      }

      proxy_pass $service_url;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/api.sgsg.space/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/api.sgsg.space/privkey.pem; # managed by Certbot
  }

  server {
    if ($host = sgsg.space) {
      return 301 https://$host$request_uri;
    } # managed by Certbot

    server_name sgsg.space;
    listen 80;
    return 404; # managed by Certbot
  }

  server {
    if ($host = api.sgsg.space) {
      return 301 https://$host$request_uri;
    } # managed by Certbot

    server_name api.sgsg.space;
    listen 80;
    return 404; # managed by Certbot
  }
}